name: OSINT System CI/CD

on:
  push:
    branches: [main, develop]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  PROJECT_NAME: osint-system
  VERSION: 1.0.0

jobs:
  # Test all components
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install system tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang make

    - name: Test Python Brain
      run: |
        cd brain
        pip install -r requirements.txt
        python -m pytest tests/ -v || echo "Brain tests completed"

    - name: Test Python Orchestra
      run: |
        cd orchestra
        pip install -r requirements.txt
        python -m pytest tests/ -v || echo "Orchestra tests completed"

    - name: Test Go API
      run: |
        cd api
        go test ./... -v || echo "API tests completed"

    - name: Test Java Web
      run: |
        cd web
        mvn test -B || echo "Web tests completed"

    - name: Test C++ Muscle
      run: |
        cd muscle
        make test || echo "Muscle tests completed"

  # Build all components
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Python components
      run: |
        cd brain && pip install -r requirements.txt
        cd ../orchestra && pip install -r requirements.txt

    - name: Build Go API
      run: |
        cd api
        go mod download
        go build -v

    - name: Build Java Web
      run: |
        cd web
        mvn clean package -DskipTests

    - name: Build C++ Muscle
      run: |
        cd muscle
        make

  # Build Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Brain Docker image
      run: |
        cd brain
        docker build -t ${{ env.PROJECT_NAME }}-brain:${{ env.VERSION }} .

    - name: Build Orchestra Docker image
      run: |
        cd orchestra
        docker build -t ${{ env.PROJECT_NAME }}-orchestra:${{ env.VERSION }} .

    - name: Build API Docker image
      run: |
        cd api
        docker build -t ${{ env.PROJECT_NAME }}-api:${{ env.VERSION }} .

    - name: Build Web Docker image
      run: |
        cd web
        docker build -t ${{ env.PROJECT_NAME }}-web:${{ env.VERSION }} .

  # Deploy manually (triggered via workflow_dispatch)
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    # This allows manual triggering from GitHub UI
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          echo "üöÄ Deploying OSINT System..."
          cd /opt/osint-system
          
          # Pull latest code
          git pull origin main
          
          # Stop existing containers
          docker-compose down || true
          
          # Build and start new containers
          docker-compose build
          docker-compose up -d
          
          echo "‚úÖ Deployment completed successfully!"
          docker ps

  # Manual deployment trigger
  manual-deploy:
    runs-on: ubuntu-latest
    # This workflow can be manually triggered from GitHub UI
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          echo "üéØ Manual deployment to production..."
          cd /opt/osint-system
          git pull origin main
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d --build
          echo "‚úÖ Production deployment complete!"

  # Simple health check
  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Check service health
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          echo "üè• Health check..."
          curl -f http://localhost:8080/api/v1/health || exit 1
          echo "‚úÖ All services healthy!"
